generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    likes         Like[]
    comments      Comment[]
    followers     Follow[]       @relation("followings")
    followings    Follow[]       @relation("followers")
    points        Int            @default(0)
    progress      Progress[]
    notifications Notification[]
    masteryId     Int?
    mastery       Mastery?       @relation(fields: [masteryId], references: [id])
    concepts      Concept[]
    Feed          Feed[]

  @@fulltext([name, email])
}

model Progress {
  lastEvaluated DateTime
  interval      Float    @default(0)
  repetition    Float    @default(0)
  efactor       Float    @default(2.5)
  userId        String
  questionId    String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, questionId])
  @@unique([userId, questionId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

    @@unique([identifier, token])
}

// Main models
model Post {
    id            String @id @default(cuid())
    caption       String @db.Text
    videoURL      String @db.Text
    coverURL      String @db.Text // video cover or mnemonic image or ""
    videoWidth    Int    @default(0)
    videoHeight   Int    @default(0)
    mnemonic_text String @db.Text
    contentType   Int    @default(3) // 1: image, 2: video, 3: text, 4: unknown

    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    likes         Like[]
    comments      Comment[]
    notifications Notification[]
    userId        String
    user          User           @relation(fields: [userId], references: [id])

    quizId  Int
    quizzes Quiz  @relation(fields: [quizId], references: [id])
    Feed    Feed[]

    @@fulltext([caption])
}

// One user has many masteries
// A check on all quizzes of one concept is conducted once a 60-day-interval quiz is completed
// If all quizzes of one concept have reached the 60-day-interval threshold, we deem the concept mastered.
// The mastered concepts are inserted into the Mastery table, the relating questions are removed from the progress table
model Mastery {
    id        Int     @id @default(autoincrement())
    user      User[]
    conceptId String
    concepts  Concept @relation(fields: [conceptId], references: [id])
}

model Like {
  questionId String
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([questionId, userId])
}

model Notification {
    id          Int      @id @default(autoincrement())
    userId      String // who are we notifying
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    content     String // e.g., you have a new like from user <name>
    status      Int      @default(0) // 1: checked, 0: unchecked
    postId      String   @default("")
    posts       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    quizId      Int      @default(0)
    quizzes     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    lastUpdated DateTime @updatedAt
}

model Comment {
  id         String   @id @default(cuid())
  questionId String
  userId     String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("followings", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followingId, followerId])
}

model Hashtag {
  id  Int    @id @default(autoincrement())
  tag String @unique
}

model Question {
  id          String   @id
  caption     String   @db.Text
  videoURL    String   @db.Text
  coverURL    String   @db.Text
  videoWidth  Int
  videoHeight Int
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  contentType Int      @default(3)

  @@fulltext([caption])
}

model HashtagToQuestion {
  A Int
  B String

model Concept {
    id        String    @id
    name      String
    masteries Mastery[]
    quizzes   Quiz[]
    users     User[]
    skillId   String
    skill     Skill     @relation(fields: [skillId], references: [id])

    @@fulltext([name])
}

model Quiz {
    id           Int            @id @default(autoincrement())
    name         String         @db.Text
    type         String
    options      String         @db.Text
    answer       String?        @db.Text // optional due to MCQ has answer true/false in the options string
    Post         Post[]
    progress     Progress[]
    conceptId    String
    concepts     Concept        @relation(fields: [conceptId], references: [id])
    Notification Notification[]
    Feed         Feed[]
}

model Feed {
    postId String
    post   Post    @relation(fields: [postId], references: [id])
    userId String
    user   User    @relation(fields: [userId], references: [id])
    quizId Int
    quiz   Quiz    @relation(fields: [quizId], references: [id])
    viewed Boolean

    @@id([postId, userId], name: "feed_identifier")
    @@unique([postId, userId])
}
